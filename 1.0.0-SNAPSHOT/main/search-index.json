{
    "docs": [
        {
            "location": "/docs/secrets/05_vault_client",
            "text": " TBD&#8230;&#8203; ",
            "title": "Custom Vault Client"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " Coherence Persistence provides the ability to create snapshots of services at any time. The snapshot operations are carried out in parallel, by all the members that own the partitions, and the snapshot files reside on the individual machines. Archiving provides the ability to take all those snapshot files and archive them to a central location, as a full set of partitions. Out of the box Coherence provides a directory snapshot archiver implementation which requires a shared directory between all members to put the snapshots. This project, provides an alternate option if you are using Oracle Cloud Infrastructure&#8217;s (OCI) Object Storage. See the Coherence Documentation for more information on Persistence and snapshots. Prerequisites Oracle Cloud Infrastructure (OCI) Access Install the OCI CLI Create an API signing key pair Create a bucket in OCI Setup Coherence Include the OCI snapshot archiver library Determine your bucket and prefix Choose the method to specify your credentials in the override file 1. Specify using a profile 2. Leave the profile out to use environment variables Specify the archiver in your cache config Configure archiver threads Enable archiver MBeans ",
            "title": "Introduction"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " You must have an account on Oracle Cloud Infrastructure (OCI). If you do not, you can sign up for a free tier here . ",
            "title": "Oracle Cloud Infrastructure (OCI) Access"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " Follow the instructions here to install the OCI CLI. ",
            "title": "Install the OCI CLI"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " To access your OCI Object storage you need to create an API signing key pair. Instructions can be found here but brief instructions are below: After logging in, view the user&#8217;s details by opening the Profile menu and click My profile or your login name. In the Resources section at the bottom left, click API Keys Click Add API Key at the top left of the API Keys list. The Add API Key dialog displays. Download the private key and place in ~/.oci directory and change the perms: chmod go-rwx ~/.oci/&lt;oci_api_keyfile&gt;.pem Copy the contents of the configuration file preview and add to ~/.oci/config it should look something like the following. You should change the name from DEFAULT if you already have and entry with this name. [DEFAULT] user=ocid1.user.oc1..xxxxxxx fingerprint=xx:xx:xx:xx tenancy=ocid1.tenancy.oc1..xxxxxx region=us-ashburn-1 key_file=&lt;path to your private keyfile&gt; # TODO You should add the path to your private key file. ",
            "title": "Create an API signing key pair"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " Follow the instructions ( here to create a bucket to store your archived snapshots. ",
            "title": "Create a bucket in OCI"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " To use the Coherence OCI snapshot archiver integrations in your project there are some prerequisites required. Oracle Cloud Infrastructure (OCI) Access You must have an account on Oracle Cloud Infrastructure (OCI). If you do not, you can sign up for a free tier here . Install the OCI CLI Follow the instructions here to install the OCI CLI. Create an API signing key pair To access your OCI Object storage you need to create an API signing key pair. Instructions can be found here but brief instructions are below: After logging in, view the user&#8217;s details by opening the Profile menu and click My profile or your login name. In the Resources section at the bottom left, click API Keys Click Add API Key at the top left of the API Keys list. The Add API Key dialog displays. Download the private key and place in ~/.oci directory and change the perms: chmod go-rwx ~/.oci/&lt;oci_api_keyfile&gt;.pem Copy the contents of the configuration file preview and add to ~/.oci/config it should look something like the following. You should change the name from DEFAULT if you already have and entry with this name. [DEFAULT] user=ocid1.user.oc1..xxxxxxx fingerprint=xx:xx:xx:xx tenancy=ocid1.tenancy.oc1..xxxxxx region=us-ashburn-1 key_file=&lt;path to your private keyfile&gt; # TODO You should add the path to your private key file. Create a bucket in OCI Follow the instructions ( here to create a bucket to store your archived snapshots. ",
            "title": "Prerequisites"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " You need to include the oci-archiver project as a dependency in your project. Currently, there are no releases for this project, but you can clone the repository and build it using the following: git clone https://github.com/oracle/coherence-oci.git cd coherence-oci mvn clean install -DskipTests Include the following dependency in your project. &lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence.oci&lt;/groupId&gt; &lt;artifactId&gt;coherence-oci-archiver&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; ",
            "title": "Include the OCI snapshot archiver library"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " You must choose an existing bucket name and an optional prefix for the directory structure. If the prefix is blank, then the directory structure it will start at / . OCI Object Storages does not have the concept of directories, but they are 'simulated' by providing fully qualified paths. ",
            "title": "Determine your bucket and prefix"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " &lt;?xml version='1.0'?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\" xml-override=\"../common/tangosol-coherence-override.xml\"&gt; &lt;cluster-config&gt; &lt;snapshot-archivers&gt; &lt;custom-archiver id=\"oci-snapshot-archiver\"&gt; &lt;class-name&gt;com.oracle.coherence.oci.archiver.ObjectStorageSnapshotArchiver&lt;/class-name&gt; &lt;init-params&gt; &lt;init-param&gt; &lt;param-value&gt;{cluster-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-value&gt;{service-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.bucket\"&gt;archiver-test-bucket&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.prefix\"&gt;test-prefix&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.profile\"&gt;OBJECT_STORAGE&lt;/param-value&gt; &lt;/init-param&gt; &lt;/init-params&gt; &lt;/custom-archiver&gt; &lt;/snapshot-archivers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; the system properties used above are examples, and you can change them to suit your needs. ",
            "title": "1. Specify sing an OCI profile"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " When you leave the profile out of the init-params this means the archiver will look for the required information in the following environment variables: Tenancy OCID: - OCI_ARCHIVER_TENANCY_OCID Region - OCI_ARCHIVER_REGION User OCID - OCI_ARCHIVER_USER_OCID Finger Print - OCI_ARCHIVER_FINGERPRINT Private Key Path - OCI_ARCHIVER_PRIVATE_KEY_PATH &lt;?xml version='1.0'?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\" xml-override=\"../common/tangosol-coherence-override.xml\"&gt; &lt;cluster-config&gt; &lt;snapshot-archivers&gt; &lt;custom-archiver id=\"oci-snapshot-archiver\"&gt; &lt;class-name&gt; com.oracle.coherence.oci.archiver.ObjectStorageSnapshotArchiver &lt;/class-name&gt; &lt;init-params&gt; &lt;init-param&gt; &lt;param-value&gt;{cluster-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-value&gt;{service-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.bucket\"&gt;archiver-test-bucket&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.prefix\"&gt;test-prefix&lt;/param-value&gt; &lt;/init-param&gt; &lt;/init-params&gt; &lt;/custom-archiver&gt; &lt;/snapshot-archivers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; ",
            "title": "2. Leave the profile out to use environment variables"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " There are two options to specify the credentials for the snapshot archiver. Specify an OCI Profile name (from ~/.oci/config ) in the override file Use environment variables This must be configured in your operational override file and specified via -Dcoherence.override=filename.xml . This allows for flexibility based upon your requirements. 1. Specify sing an OCI profile &lt;?xml version='1.0'?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\" xml-override=\"../common/tangosol-coherence-override.xml\"&gt; &lt;cluster-config&gt; &lt;snapshot-archivers&gt; &lt;custom-archiver id=\"oci-snapshot-archiver\"&gt; &lt;class-name&gt;com.oracle.coherence.oci.archiver.ObjectStorageSnapshotArchiver&lt;/class-name&gt; &lt;init-params&gt; &lt;init-param&gt; &lt;param-value&gt;{cluster-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-value&gt;{service-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.bucket\"&gt;archiver-test-bucket&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.prefix\"&gt;test-prefix&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.profile\"&gt;OBJECT_STORAGE&lt;/param-value&gt; &lt;/init-param&gt; &lt;/init-params&gt; &lt;/custom-archiver&gt; &lt;/snapshot-archivers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; the system properties used above are examples, and you can change them to suit your needs. 2. Leave the profile out to use environment variables When you leave the profile out of the init-params this means the archiver will look for the required information in the following environment variables: Tenancy OCID: - OCI_ARCHIVER_TENANCY_OCID Region - OCI_ARCHIVER_REGION User OCID - OCI_ARCHIVER_USER_OCID Finger Print - OCI_ARCHIVER_FINGERPRINT Private Key Path - OCI_ARCHIVER_PRIVATE_KEY_PATH &lt;?xml version='1.0'?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\" xml-override=\"../common/tangosol-coherence-override.xml\"&gt; &lt;cluster-config&gt; &lt;snapshot-archivers&gt; &lt;custom-archiver id=\"oci-snapshot-archiver\"&gt; &lt;class-name&gt; com.oracle.coherence.oci.archiver.ObjectStorageSnapshotArchiver &lt;/class-name&gt; &lt;init-params&gt; &lt;init-param&gt; &lt;param-value&gt;{cluster-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-value&gt;{service-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.bucket\"&gt;archiver-test-bucket&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.prefix\"&gt;test-prefix&lt;/param-value&gt; &lt;/init-param&gt; &lt;/init-params&gt; &lt;/custom-archiver&gt; &lt;/snapshot-archivers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; ",
            "title": "Choose the method to specify Your credentials in the override file"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " Below is an example where we specify the name of the archiver to use: &lt;?xml version=\"1.0\"?&gt; &lt;cache-config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-cache-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd\"&gt; &lt;caching-scheme-mapping&gt; &lt;cache-mapping&gt; &lt;cache-name&gt;*&lt;/cache-name&gt; &lt;scheme-name&gt;server&lt;/scheme-name&gt; &lt;/cache-mapping&gt; &lt;/caching-scheme-mapping&gt; &lt;caching-schemes&gt; &lt;distributed-scheme&gt; &lt;scheme-name&gt;server&lt;/scheme-name&gt; &lt;service-name&gt;PartitionedCache&lt;/service-name&gt; &lt;backing-map-scheme&gt; &lt;transient&gt;{transient false}&lt;/transient&gt; &lt;local-scheme&gt; &lt;unit-calculator&gt;BINARY&lt;/unit-calculator&gt; &lt;expiry-delay&gt;0&lt;/expiry-delay&gt; &lt;/local-scheme&gt; &lt;/backing-map-scheme&gt; &lt;persistence&gt; &lt;environment&gt;default-on-demand&lt;/environment&gt; &lt;!-- &lt;environment&gt;default-active&lt;/environment&gt; --&gt; &lt;archiver&gt;oci-snapshot-archiver&lt;/archiver&gt; &lt;/persistence&gt; &lt;autostart&gt;true&lt;/autostart&gt; &lt;/distributed-scheme&gt; &lt;/caching-schemes&gt; &lt;/cache-config&gt; ",
            "title": "Specify the archiver in your cache config"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " To optimize archiver performance, you can specify the following system property on your cache servers, to start the required number of archiver threads per storage member. -Dcoherence.distributed.persistence.oci.archiver.threads=8 The default is 4 and it is recommended to change this and test various values to determine the optimum value for your cluster. ",
            "title": "Configure archiver threads"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " By default, the following system property is enabled and instructs Coherence to create an archiver MBean to monitor snapshot performance. -Dcoherence.distributed.persistence.oci.archiver.mbean.enabled=true You can set this to false to disable this MBean. There is one MBean per service and node named: Coherence:type=ObjectStorageSnapshotArchiver,service=serviceName,nodeId=n The attributes collected are shown below: <markup lang=\"java\" title=\"SnapshotArchiverMBean.java\" >/* * Copyright (c) 2025, Oracle and/or its affiliates. * * Licensed under the Universal Permissive License v 1.0 as shown at * https://oss.oracle.com/licenses/upl. */ package com.oracle.coherence.oci.archiver; import com.tangosol.net.management.annotation.Description; import com.tangosol.net.management.annotation.MetricsValue; /** * Defines various attributes to record for snapshot a {@link ObjectStorageSnapshotArchiver}. */ @Description(\"Provides Snapshot Archiver statistics.\") public interface SnapshotArchiverMBean { /** * Returns the number of archiver threads to use in parallel. * @return the number of archiver threads to use in parallel */ @Description(\"The number of archiver threads to use in parallel.\") @MetricsValue long getArchiverThreadCount(); /** * Returns the last number of stores archived. * @return the last number of stores archived */ @Description(\"Last number of stores archived.\") @MetricsValue long getArchivedStoresCount(); /** * Returns the total time archiving stores for this storage member. * @return the total time archiving stores for this storage member */ @Description(\"Total time archiving stores for this storage member.\") @MetricsValue long getArchivedStoresTotalMillis(); /** * Returns the total number of archive store failures for this storage member. * @return the total number of archive store failures for this storage member */ @Description(\"Total number of archive store failures for this storage member.\") @MetricsValue long getArchivedStoresFailures(); /** * Returns the average time to archive stores. * @return the average time to archive stores */ @Description(\"Average time to archive stores.\") @MetricsValue float getArchivedStoresAverageMillis(); /** * Returns the maximum time to archive stores. * @return the maximum time to archive stores */ @Description(\"Maximum time to archive stores.\") @MetricsValue long getArchivedStoresMaxMillis(); /** * Returns the last duration to archive all stores. * @return the last duration to archive all stores */ @Description(\"Last duration to archive all stores.\") @MetricsValue long getArchivedStoresLastDurationMillis(); /** * Returns the last number of stores retrieved. * @return the last number of stores retrieved. */ @Description(\"Last number of stores retrieved.\") @MetricsValue long getRetrievedStoresCount(); /** * Returns the total time retrieving stores. * @return the total time retrieving stores */ @Description(\"Total time retrieving stores.\") @MetricsValue long getRetrievedStoresTotalMillis(); /** * Returns the total number of retrieve store failures. * @return the total number of retrieve store failures. */ @Description(\"Total number of retrieve store failures.\") @MetricsValue long getRetrievedStoresFailures(); /** * Returns the average time to retrieve stores. * @return the average time to retrieve stores */ @Description(\"Average time to retrieve stores.\") @MetricsValue float getRetrievedStoresAverageMillis(); /** * Returns the maximum time to retrieve stores. * @return the maximum time to retrieve stores. */ @Description(\"Maximum time to retrieve stores.\") @MetricsValue float getRetrievedStoresMaxMillis(); /** * Returns the last duration to retrieve all stores. * @return the last duration to retrieve all stores. */ @Description(\"Last duration to retrieve all stores.\") @MetricsValue long getRetrievedStoresLastDurationMillis(); /** * Returns the last number of stores deleted. * @return the last number of stores deleted. */ @Description(\"Last number of stores deleted.\") @MetricsValue long getDeletedStoresCount(); /** * Returns the total time deleting stores. * @return the total time deleting stores. */ @Description(\"Total time deleting stores.\") @MetricsValue long getDeletedStoresTotalMillis(); /** * Returns the total number of delete store failures. * @return the total number of delete store failures. */ @Description(\"Total number of delete store failures.\") @MetricsValue long getDeletedStoresFailures(); /** * Returns the average time to delete stores. * @return the average time to delete stores. */ @Description(\"Average time to delete stores.\") @MetricsValue float getDeletedStoresAverageMillis(); /** * Returns the maximum time to delete stores. * @return the maximum time to delete stores. */ @Description(\"Maximum time to delete stores.\") @MetricsValue float getDeletedStoresMaxMillis(); /** * Returns the last duration to delete all stores. * @return the last duration to delete all stores. */ @Description(\"Last duration to delete all stores.\") @MetricsValue long getDeleteStoresLastDurationMillis(); /** * Resets the statistics. */ @Description(\"Reset the statistics.\") public void resetArchiverStatistics(); } ",
            "title": "Monitoring archiver throughput"
        },
        {
            "location": "/docs/oci-archiver/01_introduction",
            "text": " Include the OCI snapshot archiver library You need to include the oci-archiver project as a dependency in your project. Currently, there are no releases for this project, but you can clone the repository and build it using the following: git clone https://github.com/oracle/coherence-oci.git cd coherence-oci mvn clean install -DskipTests Include the following dependency in your project. &lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence.oci&lt;/groupId&gt; &lt;artifactId&gt;coherence-oci-archiver&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; Determine your bucket and prefix You must choose an existing bucket name and an optional prefix for the directory structure. If the prefix is blank, then the directory structure it will start at / . OCI Object Storages does not have the concept of directories, but they are 'simulated' by providing fully qualified paths. Choose the method to specify Your credentials in the override file There are two options to specify the credentials for the snapshot archiver. Specify an OCI Profile name (from ~/.oci/config ) in the override file Use environment variables This must be configured in your operational override file and specified via -Dcoherence.override=filename.xml . This allows for flexibility based upon your requirements. 1. Specify sing an OCI profile &lt;?xml version='1.0'?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\" xml-override=\"../common/tangosol-coherence-override.xml\"&gt; &lt;cluster-config&gt; &lt;snapshot-archivers&gt; &lt;custom-archiver id=\"oci-snapshot-archiver\"&gt; &lt;class-name&gt;com.oracle.coherence.oci.archiver.ObjectStorageSnapshotArchiver&lt;/class-name&gt; &lt;init-params&gt; &lt;init-param&gt; &lt;param-value&gt;{cluster-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-value&gt;{service-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.bucket\"&gt;archiver-test-bucket&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.prefix\"&gt;test-prefix&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.profile\"&gt;OBJECT_STORAGE&lt;/param-value&gt; &lt;/init-param&gt; &lt;/init-params&gt; &lt;/custom-archiver&gt; &lt;/snapshot-archivers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; the system properties used above are examples, and you can change them to suit your needs. 2. Leave the profile out to use environment variables When you leave the profile out of the init-params this means the archiver will look for the required information in the following environment variables: Tenancy OCID: - OCI_ARCHIVER_TENANCY_OCID Region - OCI_ARCHIVER_REGION User OCID - OCI_ARCHIVER_USER_OCID Finger Print - OCI_ARCHIVER_FINGERPRINT Private Key Path - OCI_ARCHIVER_PRIVATE_KEY_PATH &lt;?xml version='1.0'?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\" xml-override=\"../common/tangosol-coherence-override.xml\"&gt; &lt;cluster-config&gt; &lt;snapshot-archivers&gt; &lt;custom-archiver id=\"oci-snapshot-archiver\"&gt; &lt;class-name&gt; com.oracle.coherence.oci.archiver.ObjectStorageSnapshotArchiver &lt;/class-name&gt; &lt;init-params&gt; &lt;init-param&gt; &lt;param-value&gt;{cluster-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-value&gt;{service-name}&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.bucket\"&gt;archiver-test-bucket&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value system-property=\"oci.archiver.prefix\"&gt;test-prefix&lt;/param-value&gt; &lt;/init-param&gt; &lt;/init-params&gt; &lt;/custom-archiver&gt; &lt;/snapshot-archivers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; Specify the archiver in your cache config Below is an example where we specify the name of the archiver to use: &lt;?xml version=\"1.0\"?&gt; &lt;cache-config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-cache-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd\"&gt; &lt;caching-scheme-mapping&gt; &lt;cache-mapping&gt; &lt;cache-name&gt;*&lt;/cache-name&gt; &lt;scheme-name&gt;server&lt;/scheme-name&gt; &lt;/cache-mapping&gt; &lt;/caching-scheme-mapping&gt; &lt;caching-schemes&gt; &lt;distributed-scheme&gt; &lt;scheme-name&gt;server&lt;/scheme-name&gt; &lt;service-name&gt;PartitionedCache&lt;/service-name&gt; &lt;backing-map-scheme&gt; &lt;transient&gt;{transient false}&lt;/transient&gt; &lt;local-scheme&gt; &lt;unit-calculator&gt;BINARY&lt;/unit-calculator&gt; &lt;expiry-delay&gt;0&lt;/expiry-delay&gt; &lt;/local-scheme&gt; &lt;/backing-map-scheme&gt; &lt;persistence&gt; &lt;environment&gt;default-on-demand&lt;/environment&gt; &lt;!-- &lt;environment&gt;default-active&lt;/environment&gt; --&gt; &lt;archiver&gt;oci-snapshot-archiver&lt;/archiver&gt; &lt;/persistence&gt; &lt;autostart&gt;true&lt;/autostart&gt; &lt;/distributed-scheme&gt; &lt;/caching-schemes&gt; &lt;/cache-config&gt; Configure archiver threads To optimize archiver performance, you can specify the following system property on your cache servers, to start the required number of archiver threads per storage member. -Dcoherence.distributed.persistence.oci.archiver.threads=8 The default is 4 and it is recommended to change this and test various values to determine the optimum value for your cluster. Monitoring archiver throughput By default, the following system property is enabled and instructs Coherence to create an archiver MBean to monitor snapshot performance. -Dcoherence.distributed.persistence.oci.archiver.mbean.enabled=true You can set this to false to disable this MBean. There is one MBean per service and node named: Coherence:type=ObjectStorageSnapshotArchiver,service=serviceName,nodeId=n The attributes collected are shown below: <markup lang=\"java\" title=\"SnapshotArchiverMBean.java\" >/* * Copyright (c) 2025, Oracle and/or its affiliates. * * Licensed under the Universal Permissive License v 1.0 as shown at * https://oss.oracle.com/licenses/upl. */ package com.oracle.coherence.oci.archiver; import com.tangosol.net.management.annotation.Description; import com.tangosol.net.management.annotation.MetricsValue; /** * Defines various attributes to record for snapshot a {@link ObjectStorageSnapshotArchiver}. */ @Description(\"Provides Snapshot Archiver statistics.\") public interface SnapshotArchiverMBean { /** * Returns the number of archiver threads to use in parallel. * @return the number of archiver threads to use in parallel */ @Description(\"The number of archiver threads to use in parallel.\") @MetricsValue long getArchiverThreadCount(); /** * Returns the last number of stores archived. * @return the last number of stores archived */ @Description(\"Last number of stores archived.\") @MetricsValue long getArchivedStoresCount(); /** * Returns the total time archiving stores for this storage member. * @return the total time archiving stores for this storage member */ @Description(\"Total time archiving stores for this storage member.\") @MetricsValue long getArchivedStoresTotalMillis(); /** * Returns the total number of archive store failures for this storage member. * @return the total number of archive store failures for this storage member */ @Description(\"Total number of archive store failures for this storage member.\") @MetricsValue long getArchivedStoresFailures(); /** * Returns the average time to archive stores. * @return the average time to archive stores */ @Description(\"Average time to archive stores.\") @MetricsValue float getArchivedStoresAverageMillis(); /** * Returns the maximum time to archive stores. * @return the maximum time to archive stores */ @Description(\"Maximum time to archive stores.\") @MetricsValue long getArchivedStoresMaxMillis(); /** * Returns the last duration to archive all stores. * @return the last duration to archive all stores */ @Description(\"Last duration to archive all stores.\") @MetricsValue long getArchivedStoresLastDurationMillis(); /** * Returns the last number of stores retrieved. * @return the last number of stores retrieved. */ @Description(\"Last number of stores retrieved.\") @MetricsValue long getRetrievedStoresCount(); /** * Returns the total time retrieving stores. * @return the total time retrieving stores */ @Description(\"Total time retrieving stores.\") @MetricsValue long getRetrievedStoresTotalMillis(); /** * Returns the total number of retrieve store failures. * @return the total number of retrieve store failures. */ @Description(\"Total number of retrieve store failures.\") @MetricsValue long getRetrievedStoresFailures(); /** * Returns the average time to retrieve stores. * @return the average time to retrieve stores */ @Description(\"Average time to retrieve stores.\") @MetricsValue float getRetrievedStoresAverageMillis(); /** * Returns the maximum time to retrieve stores. * @return the maximum time to retrieve stores. */ @Description(\"Maximum time to retrieve stores.\") @MetricsValue float getRetrievedStoresMaxMillis(); /** * Returns the last duration to retrieve all stores. * @return the last duration to retrieve all stores. */ @Description(\"Last duration to retrieve all stores.\") @MetricsValue long getRetrievedStoresLastDurationMillis(); /** * Returns the last number of stores deleted. * @return the last number of stores deleted. */ @Description(\"Last number of stores deleted.\") @MetricsValue long getDeletedStoresCount(); /** * Returns the total time deleting stores. * @return the total time deleting stores. */ @Description(\"Total time deleting stores.\") @MetricsValue long getDeletedStoresTotalMillis(); /** * Returns the total number of delete store failures. * @return the total number of delete store failures. */ @Description(\"Total number of delete store failures.\") @MetricsValue long getDeletedStoresFailures(); /** * Returns the average time to delete stores. * @return the average time to delete stores. */ @Description(\"Average time to delete stores.\") @MetricsValue float getDeletedStoresAverageMillis(); /** * Returns the maximum time to delete stores. * @return the maximum time to delete stores. */ @Description(\"Maximum time to delete stores.\") @MetricsValue float getDeletedStoresMaxMillis(); /** * Returns the last duration to delete all stores. * @return the last duration to delete all stores. */ @Description(\"Last duration to delete all stores.\") @MetricsValue long getDeleteStoresLastDurationMillis(); /** * Resets the statistics. */ @Description(\"Reset the statistics.\") public void resetArchiverStatistics(); } ",
            "title": "Setup Coherence"
        },
        {
            "location": "/docs/about/03_authentication",
            "text": " In the AuthenticationFactory above, a number of values used to create the AuthenticationDetailsProvider were hard coded in the createAuthentication() method. This is fine for an example, but not very flexible for real life use. Typically, configuration values would be obtained from System properties or environment variables in the createAuthentication() method, but alternatively they can be passed in from the configuration. The AuthenticationFactory class could be changed to parameterize the private key location, tenant id, user id and fingerprint, as shown below. <markup lang=\"java\" title=\"AuthenticationFactory.java\" >package com.oracle.coherence.oci.example; import com.oracle.bmc.auth.AuthenticationDetailsProvider; import com.oracle.bmc.auth.SimpleAuthenticationDetailsProvider; import com.oracle.bmc.auth.SimplePrivateKeySupplier; import java.io.InputStream; import java.util.function.Supplier; public class AuthenticationFactory { public static AuthenticationDetailsProvider createAuthentication(String pem, String tenantId, String userId, String fingerprint) { Supplier&lt;InputStream&gt; privateKeySupplier = new SimplePrivateKeySupplier(pem); return SimpleAuthenticationDetailsProvider.builder() .tenantId(tenantId) .userId(userId) .fingerprint(fingerprint) .privateKeySupplier(privateKeySupplier::get) .build(); } } The Coherence operational configuration file can then be changed to pass in the corresponding values. <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\"&gt; &lt;cluster-config&gt; &lt;resources&gt; &lt;resource id=\"oci-authentication\"&gt; &lt;class-factory-name&gt;com.oracle.coherence.oci.example.AuthenticationFactory&lt;/class-factory-name&gt; &lt;method-name&gt;createAuthentication&lt;/method-name&gt; &lt;init-params&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;~/.oci/oci_api_key.pem&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;myTenantId&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;myUserId&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;myFingerprint&lt;/param-value&gt; &lt;/init-param&gt; &lt;/init-params&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; ",
            "title": "Parameterizing the Configuration"
        },
        {
            "location": "/docs/about/03_authentication",
            "text": " Taking the code from the OCI Java API Getting Started guide, an AuthenticationDetailsProvider instance can be created like this: <markup lang=\"java\" title=\"AuthenticationFactory.java\" >package com.oracle.coherence.oci.example; import com.oracle.bmc.auth.AuthenticationDetailsProvider; import com.oracle.bmc.auth.SimpleAuthenticationDetailsProvider; import com.oracle.bmc.auth.SimplePrivateKeySupplier; import java.io.InputStream; import java.util.function.Supplier; public class AuthenticationFactory { public static AuthenticationDetailsProvider createAuthentication() { Supplier&lt;InputStream&gt; privateKeySupplier = new SimplePrivateKeySupplier(\"~/.oci/oci_api_key.pem\"); return SimpleAuthenticationDetailsProvider.builder() .tenantId(\"myTenantId\") .userId(\"myUserId\") .fingerprint(\"myFingerprint\") .privateKeySupplier(privateKeySupplier::get) .build(); } } The Coherence OCI integrations can then be configured to use the AuthenticationFactory . All the Coherence OCI integrations will look for a custom cluster resource defined in the Coherence operational configuration file, with the id oci-authentication . If this resource is present, it will be used to provide an AbstractAuthenticationDetailsProvider instead of the OCI defaults. For example, the com.oracle.coherence.oci.example.AuthenticationFactory above can be added to the &lt;cluster-config&gt; resources section in the operational configuration file as shown below: <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\"&gt; &lt;cluster-config&gt; &lt;resources&gt; &lt;resource id=\"oci-authentication\"&gt; &lt;class-factory-name&gt;com.oracle.coherence.oci.example.AuthenticationFactory&lt;/class-factory-name&gt; &lt;method-name&gt;createAuthentication&lt;/method-name&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; With the above configuration, whenever any of the Coherence OCI integrations requires a AbstractAuthenticationDetailsProvider instance, it will call the AuthenticationFactory.createAuthentication() method. Parameterizing the Configuration In the AuthenticationFactory above, a number of values used to create the AuthenticationDetailsProvider were hard coded in the createAuthentication() method. This is fine for an example, but not very flexible for real life use. Typically, configuration values would be obtained from System properties or environment variables in the createAuthentication() method, but alternatively they can be passed in from the configuration. The AuthenticationFactory class could be changed to parameterize the private key location, tenant id, user id and fingerprint, as shown below. <markup lang=\"java\" title=\"AuthenticationFactory.java\" >package com.oracle.coherence.oci.example; import com.oracle.bmc.auth.AuthenticationDetailsProvider; import com.oracle.bmc.auth.SimpleAuthenticationDetailsProvider; import com.oracle.bmc.auth.SimplePrivateKeySupplier; import java.io.InputStream; import java.util.function.Supplier; public class AuthenticationFactory { public static AuthenticationDetailsProvider createAuthentication(String pem, String tenantId, String userId, String fingerprint) { Supplier&lt;InputStream&gt; privateKeySupplier = new SimplePrivateKeySupplier(pem); return SimpleAuthenticationDetailsProvider.builder() .tenantId(tenantId) .userId(userId) .fingerprint(fingerprint) .privateKeySupplier(privateKeySupplier::get) .build(); } } The Coherence operational configuration file can then be changed to pass in the corresponding values. <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\"&gt; &lt;cluster-config&gt; &lt;resources&gt; &lt;resource id=\"oci-authentication\"&gt; &lt;class-factory-name&gt;com.oracle.coherence.oci.example.AuthenticationFactory&lt;/class-factory-name&gt; &lt;method-name&gt;createAuthentication&lt;/method-name&gt; &lt;init-params&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;~/.oci/oci_api_key.pem&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;myTenantId&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;myUserId&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;myFingerprint&lt;/param-value&gt; &lt;/init-param&gt; &lt;/init-params&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; ",
            "title": "Configure a Global Coherence OCI Authentication"
        },
        {
            "location": "/docs/about/03_authentication",
            "text": " Most of the Coherence OCI integrations can have a custom authentication configured in-line using the &lt;oci:authentication&gt; XML element, wherever they are added to Coherence XML configuration files. For example, a Secrets PasswordProvider can be configured directly with custom authentication. <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;cluster-config&gt; &lt;password-providers&gt; &lt;password-provider id=\"secrets\"&gt; &lt;oci:secrets-password-provider&gt; &lt;oci:secret-id&gt;ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a&lt;/oci:secret-id&gt; &lt;oci:authentication&gt; &lt;class-factory-name&gt;com.oracle.coherence.oci.example.AuthenticationFactory&lt;/class-factory-name&gt; &lt;method-name&gt;createAuthentication&lt;/method-name&gt; &lt;/oci:authentication&gt; &lt;/oci:secrets-password-provider&gt; &lt;/password-provider&gt; &lt;/password-providers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; In the example above, the password provider will obtain the password from a secret with the OCID ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a using the authentication obtained from the AuthenticationFactory class. ",
            "title": "Configure In-Line Coherence OCI Authentication"
        },
        {
            "location": "/docs/about/03_authentication",
            "text": " The Coherence OCI integrations require connections to various OCI services. As such, they require configuring with the correct configuration file and authentications. Out of the box, Coherence OCI integrations use the default OCI configuration mechanism, as described in the Getting Started guide. It is possible to override the default behaviour and provide a custom configured OCI com.oracle.bmc.auth.AbstractAuthenticationDetailsProvider as shown in the OCI Java API Getting Started guide. This allows the Coherence OCI integrations to use any custom configuration required by a specific application. Configure a Global Coherence OCI Authentication Taking the code from the OCI Java API Getting Started guide, an AuthenticationDetailsProvider instance can be created like this: <markup lang=\"java\" title=\"AuthenticationFactory.java\" >package com.oracle.coherence.oci.example; import com.oracle.bmc.auth.AuthenticationDetailsProvider; import com.oracle.bmc.auth.SimpleAuthenticationDetailsProvider; import com.oracle.bmc.auth.SimplePrivateKeySupplier; import java.io.InputStream; import java.util.function.Supplier; public class AuthenticationFactory { public static AuthenticationDetailsProvider createAuthentication() { Supplier&lt;InputStream&gt; privateKeySupplier = new SimplePrivateKeySupplier(\"~/.oci/oci_api_key.pem\"); return SimpleAuthenticationDetailsProvider.builder() .tenantId(\"myTenantId\") .userId(\"myUserId\") .fingerprint(\"myFingerprint\") .privateKeySupplier(privateKeySupplier::get) .build(); } } The Coherence OCI integrations can then be configured to use the AuthenticationFactory . All the Coherence OCI integrations will look for a custom cluster resource defined in the Coherence operational configuration file, with the id oci-authentication . If this resource is present, it will be used to provide an AbstractAuthenticationDetailsProvider instead of the OCI defaults. For example, the com.oracle.coherence.oci.example.AuthenticationFactory above can be added to the &lt;cluster-config&gt; resources section in the operational configuration file as shown below: <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\"&gt; &lt;cluster-config&gt; &lt;resources&gt; &lt;resource id=\"oci-authentication\"&gt; &lt;class-factory-name&gt;com.oracle.coherence.oci.example.AuthenticationFactory&lt;/class-factory-name&gt; &lt;method-name&gt;createAuthentication&lt;/method-name&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; With the above configuration, whenever any of the Coherence OCI integrations requires a AbstractAuthenticationDetailsProvider instance, it will call the AuthenticationFactory.createAuthentication() method. Parameterizing the Configuration In the AuthenticationFactory above, a number of values used to create the AuthenticationDetailsProvider were hard coded in the createAuthentication() method. This is fine for an example, but not very flexible for real life use. Typically, configuration values would be obtained from System properties or environment variables in the createAuthentication() method, but alternatively they can be passed in from the configuration. The AuthenticationFactory class could be changed to parameterize the private key location, tenant id, user id and fingerprint, as shown below. <markup lang=\"java\" title=\"AuthenticationFactory.java\" >package com.oracle.coherence.oci.example; import com.oracle.bmc.auth.AuthenticationDetailsProvider; import com.oracle.bmc.auth.SimpleAuthenticationDetailsProvider; import com.oracle.bmc.auth.SimplePrivateKeySupplier; import java.io.InputStream; import java.util.function.Supplier; public class AuthenticationFactory { public static AuthenticationDetailsProvider createAuthentication(String pem, String tenantId, String userId, String fingerprint) { Supplier&lt;InputStream&gt; privateKeySupplier = new SimplePrivateKeySupplier(pem); return SimpleAuthenticationDetailsProvider.builder() .tenantId(tenantId) .userId(userId) .fingerprint(fingerprint) .privateKeySupplier(privateKeySupplier::get) .build(); } } The Coherence operational configuration file can then be changed to pass in the corresponding values. <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\"&gt; &lt;cluster-config&gt; &lt;resources&gt; &lt;resource id=\"oci-authentication\"&gt; &lt;class-factory-name&gt;com.oracle.coherence.oci.example.AuthenticationFactory&lt;/class-factory-name&gt; &lt;method-name&gt;createAuthentication&lt;/method-name&gt; &lt;init-params&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;~/.oci/oci_api_key.pem&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;myTenantId&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;myUserId&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-type&gt;string&lt;/param-type&gt; &lt;param-value&gt;myFingerprint&lt;/param-value&gt; &lt;/init-param&gt; &lt;/init-params&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; Configure In-Line Coherence OCI Authentication Most of the Coherence OCI integrations can have a custom authentication configured in-line using the &lt;oci:authentication&gt; XML element, wherever they are added to Coherence XML configuration files. For example, a Secrets PasswordProvider can be configured directly with custom authentication. <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;cluster-config&gt; &lt;password-providers&gt; &lt;password-provider id=\"secrets\"&gt; &lt;oci:secrets-password-provider&gt; &lt;oci:secret-id&gt;ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a&lt;/oci:secret-id&gt; &lt;oci:authentication&gt; &lt;class-factory-name&gt;com.oracle.coherence.oci.example.AuthenticationFactory&lt;/class-factory-name&gt; &lt;method-name&gt;createAuthentication&lt;/method-name&gt; &lt;/oci:authentication&gt; &lt;/oci:secrets-password-provider&gt; &lt;/password-provider&gt; &lt;/password-providers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; In the example above, the password provider will obtain the password from a secret with the OCID ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a using the authentication obtained from the AuthenticationFactory class. ",
            "title": "Custom Authentication"
        },
        {
            "location": "/docs/secrets/03_password_provider",
            "text": " Some Coherence configuration elements allow passwords to be specified using a custom PasswordProvider , for example when providing TLS key credentials. The Coherence OCI secrets service integrations provide a custom PasswordProvider that obtains a password from a secret. The Coherence OCI XML configuration extensions provide a secrets-password-provider element to configure the secret password provider. The Coherence OCI custom XML namespace must be added to the Coherence operational configuration file or cache configuration file that the password provider is being configured in, as described in the Getting Started guide. With the OCI namespace added, a secret password provider can be used anywhere the Coherence XML uses a &lt;password-provider&gt; element, by adding the &lt;oci:secrets-password-provider&gt; element as a child of the &lt;password-provider&gt; element. In the example below, the password will come from a secret with the OCID ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a . <markup lang=\"xml\" >&lt;password-provider id=\"secret-password\"&gt; &lt;oci:secrets-password-provider&gt; ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:secrets-password-provider&gt; &lt;/password-provider&gt; Alternatively, instead of specifying the OCID of the secret, a combination of a secret name and a Compartment OCID can be used. In the example below the password will be read from the secret named foo in the compartment with the OCID ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a . <markup lang=\"xml\" >&lt;password-provider id=\"secret-password\"&gt; &lt;oci:secrets-password-provider&gt; &lt;oci:secret-name&gt;foo&lt;/oci:secret-name&gt; &lt;oci:compartment-id&gt; ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:compartment-id&gt; &lt;/oci:secrets-password-provider&gt; &lt;/password-provider&gt; A password provider can be added to the Coherence operational configuration file, as shown below: <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;cluster-config&gt; &lt;password-providers&gt; &lt;password-provider id=\"secret-one\"&gt; &lt;oci:secrets-password-provider&gt; ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:secrets-password-provider&gt; &lt;/password-provider&gt; &lt;password-provider id=\"secret-two\"&gt; &lt;oci:secrets-password-provider&gt; &lt;oci:secret-name&gt;my-secret&lt;/oci:secret-name&gt; &lt;oci:compartment-id&gt; ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmenttxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:compartment-id&gt; &lt;/oci:secrets-password-provider&gt; &lt;/password-provider&gt; &lt;/password-providers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; The secret-one password provider will retrieve the password from the secret with the OCID ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a The secret-two password provider will retrieve the password from the secret named my-secret in the OCI compartment with the OCID ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmenttxgxkxku5zhmpu35j67hdxvxpglijz4a . ",
            "title": "Store Passwords in Secrets"
        },
        {
            "location": "/docs/secrets/04_secrets_client",
            "text": " TBD&#8230;&#8203; ",
            "title": "Custom Secrets Client"
        },
        {
            "location": "/docs/secrets/01_introduction",
            "text": " This module provides integrations between Coherence and the OCI Secrets Service. The following features are available: Store TLS/SSL keystores, keys and certificates in OCI secrets Store passwords in OCI secrets ",
            "title": "Introduction"
        },
        {
            "location": "/docs/secrets/01_introduction",
            "text": " The Coherence OCI modules require the OCI APIs to be configured as described in the Getting Started guide. ",
            "title": "Configuration"
        },
        {
            "location": "/docs/secrets/01_introduction",
            "text": " To use the Coherence OCI Secrets module your project must depend on coherence.jar and coherence-oci-secrets.jar by adding the following dependency to your project. <markup lang=\"xml\" title=\"Maven pom.xml\" >&lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence.ce&lt;/groupId&gt; &lt;artifactId&gt;coherence&lt;/artifactId&gt; &lt;version&gt;${coherence.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence&lt;/groupId&gt; &lt;artifactId&gt;coherence-oci-secrets&lt;/artifactId&gt; &lt;version&gt;${coherence.oci.version}&lt;/version&gt; &lt;/dependency&gt; <markup title=\"Gradle build.gradle\" >implementation \"com.oracle.coherence.ce:coherence:${coherence.version}\" implementation \"com.oracle.coherence:coherence-oci-secrets:${coherence.oci.version}\" Replacing ${coherence.version} with the version of Coherence being used and replacing ${coherence.oci.version} with the version of the Coherence OCI module you are using. ",
            "title": "Project Dependencies"
        },
        {
            "location": "/docs/secrets/01_introduction",
            "text": " The Coherence OCI Integrations publishes builds of the latest code to the Sonatype Maven snapshots repository. To use Coherence OCI snapshot versions the Sonatype snapshot repository should be added to the application. For example, to use version 1.0.0-SNAPSHOT of Coherence OCI and 22.06-SNAPSHOT of Coherence CE: <markup lang=\"xml\" title=\"pom.xml\" > &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence.ce&lt;/groupId&gt; &lt;artifactId&gt;coherence&lt;/artifactId&gt; &lt;version&gt;22.06-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence&lt;/groupId&gt; &lt;artifactId&gt;coherence-oci-secrets&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;snapshots-repo&lt;/id&gt; &lt;url&gt;https://central.sonatype.com/repository/maven-snapshots&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; ",
            "title": "Using Snapshot Builds"
        },
        {
            "location": "/docs/secrets/01_introduction",
            "text": " To use the Coherence OCI Secretes integrations in your project there are some prerequisites required. Configuration The Coherence OCI modules require the OCI APIs to be configured as described in the Getting Started guide. Project Dependencies To use the Coherence OCI Secrets module your project must depend on coherence.jar and coherence-oci-secrets.jar by adding the following dependency to your project. <markup lang=\"xml\" title=\"Maven pom.xml\" >&lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence.ce&lt;/groupId&gt; &lt;artifactId&gt;coherence&lt;/artifactId&gt; &lt;version&gt;${coherence.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence&lt;/groupId&gt; &lt;artifactId&gt;coherence-oci-secrets&lt;/artifactId&gt; &lt;version&gt;${coherence.oci.version}&lt;/version&gt; &lt;/dependency&gt; <markup title=\"Gradle build.gradle\" >implementation \"com.oracle.coherence.ce:coherence:${coherence.version}\" implementation \"com.oracle.coherence:coherence-oci-secrets:${coherence.oci.version}\" Replacing ${coherence.version} with the version of Coherence being used and replacing ${coherence.oci.version} with the version of the Coherence OCI module you are using. Using Snapshot Builds The Coherence OCI Integrations publishes builds of the latest code to the Sonatype Maven snapshots repository. To use Coherence OCI snapshot versions the Sonatype snapshot repository should be added to the application. For example, to use version 1.0.0-SNAPSHOT of Coherence OCI and 22.06-SNAPSHOT of Coherence CE: <markup lang=\"xml\" title=\"pom.xml\" > &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence.ce&lt;/groupId&gt; &lt;artifactId&gt;coherence&lt;/artifactId&gt; &lt;version&gt;22.06-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.oracle.coherence&lt;/groupId&gt; &lt;artifactId&gt;coherence-oci-secrets&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;snapshots-repo&lt;/id&gt; &lt;url&gt;https://central.sonatype.com/repository/maven-snapshots&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; ",
            "title": "Prerequisites"
        },
        {
            "location": "/docs/about/02_getting_started",
            "text": " The default location of the OCI configuration file is ~/.oci/config This can be overridden by setting the OCI_CONFIG_FILE environment variable to point to a different configuration file. The Coherence OCI modules also allow the OCI configuration file location to be overridden using the coherence.oci.config.file system property, or COHERENCE_OCI_CONFIG_FILE environment variable. ",
            "title": "Specify the OCI Configuration File"
        },
        {
            "location": "/docs/about/02_getting_started",
            "text": " The OCI configuration file typically contains a DEFAULT profile, but may optionally contain other profiles. The OCI API only supports programmatically setting the profile to use. The Coherence OCI modules allows the profile to be overridden by setting the coherence.oci.config.profile system property, or COHERENCE_OCI_CONFIG_PROFILE environment variable. ",
            "title": "Specify the OCI Profile"
        },
        {
            "location": "/docs/about/02_getting_started",
            "text": " The default mode of operation for Coherence OCI is to use the OCI APIs default configuration mechanism, as described in the OCI SDK and CLI Configuration documentation. No other additional Coherence configuration is required if the OCI configuration file is present in the default location. Specify the OCI Configuration File The default location of the OCI configuration file is ~/.oci/config This can be overridden by setting the OCI_CONFIG_FILE environment variable to point to a different configuration file. The Coherence OCI modules also allow the OCI configuration file location to be overridden using the coherence.oci.config.file system property, or COHERENCE_OCI_CONFIG_FILE environment variable. Specify the OCI Profile The OCI configuration file typically contains a DEFAULT profile, but may optionally contain other profiles. The OCI API only supports programmatically setting the profile to use. The Coherence OCI modules allows the profile to be overridden by setting the coherence.oci.config.profile system property, or COHERENCE_OCI_CONFIG_PROFILE environment variable. ",
            "title": "Default Configuration"
        },
        {
            "location": "/docs/about/02_getting_started",
            "text": " When adding OCI extensions to a Coherence cache configuration file or operational configuration override file, the custom OCI namespace needs to be added to the root element. In the cache configuration file, add the xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" namespace declaration and add the schema location class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd <markup lang=\"xml\" title=\"coherence-cache-config.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;cache-config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-cache-config\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;/cache-config&gt; In the operational override configuration file, add the xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" namespace declaration and add the schema location class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;/coherence&gt; With the additional namespace added, OCI XML extensions can be added to the configuration files by prefixing the OCI XML elements with oci: ",
            "title": "XML Configuration"
        },
        {
            "location": "/docs/about/02_getting_started",
            "text": " Coherence OCI integrations use the OCI APIs to communicate with the various OCI services. The OCI APIs require configuration and authentication to work correctly. Default Configuration The default mode of operation for Coherence OCI is to use the OCI APIs default configuration mechanism, as described in the OCI SDK and CLI Configuration documentation. No other additional Coherence configuration is required if the OCI configuration file is present in the default location. Specify the OCI Configuration File The default location of the OCI configuration file is ~/.oci/config This can be overridden by setting the OCI_CONFIG_FILE environment variable to point to a different configuration file. The Coherence OCI modules also allow the OCI configuration file location to be overridden using the coherence.oci.config.file system property, or COHERENCE_OCI_CONFIG_FILE environment variable. Specify the OCI Profile The OCI configuration file typically contains a DEFAULT profile, but may optionally contain other profiles. The OCI API only supports programmatically setting the profile to use. The Coherence OCI modules allows the profile to be overridden by setting the coherence.oci.config.profile system property, or COHERENCE_OCI_CONFIG_PROFILE environment variable. XML Configuration When adding OCI extensions to a Coherence cache configuration file or operational configuration override file, the custom OCI namespace needs to be added to the root element. In the cache configuration file, add the xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" namespace declaration and add the schema location class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd <markup lang=\"xml\" title=\"coherence-cache-config.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;cache-config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-cache-config\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-cache-config coherence-cache-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;/cache-config&gt; In the operational override configuration file, add the xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" namespace declaration and add the schema location class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd <markup lang=\"xml\" title=\"tangosol-coherence-override.xml\" >&lt;?xml version=\"1.0\"?&gt; &lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;/coherence&gt; With the additional namespace added, OCI XML extensions can be added to the configuration files by prefixing the OCI XML elements with oci: ",
            "title": "Getting Started"
        },
        {
            "location": "/docs/about/01_overview",
            "text": " The Coherence OCI project provides integrations between Oracle Coherence and Oracle Cloud Infrastructure (OCI). fa-rocket Getting Started Getting started with Coherence OCI. ",
            "title": "Overview"
        },
        {
            "location": "/docs/about/01_overview",
            "text": " visibility_off Vault & Secrets Coherence integrations with the OCI Vault and Secrets service. For example, storing passwords, TLS keys and certificates as secrets. cloud_upload OCI Snapshot Archiver Archive snapshots to OCI Object storage buckets. ",
            "title": "OCI Integrations"
        },
        {
            "location": "/docs/secrets/02_ssl",
            "text": " The Coherence OCI Secrets module provides a number of custom Coherence XML configuration extensions. To use these additional XML elements, the Coherence OCI custom XML namespace must be added to the Coherence operational configuration file or cache configuration file, as described in the Getting Started guide. ",
            "title": "XML Configuration"
        },
        {
            "location": "/docs/secrets/02_ssl",
            "text": " Coherence can be configured to use SSL for secure communication, as described in the Using SSL to Secure Communication section of the Coherence documentation. By default, they keystores, keys or certificates used by Coherence are stored on the file system or classpath of the JVM. The Coherence OCI Secrets module allows keystores, private keys and certificates to be fetched from the OCI Secrets Service instead of requiring them to be pre-installed as files. The Coherence APIs provide a way to extend Coherence SSL support to load keystores, private keys and certificates using custom loaders. The Coherence OCI Secrets module makes use of these APIs to add custom loaders to load data from the OCI Secret Service. The keystores, private keys and certificates are then never stored on the local file system. Note The Coherence OCI Secrets module only fetches keystores, private keys and certificates, it does not provide an API to upload this data to the OCI Secrets Service. The following files can be retrieved from OCI secrets: Private Keys from Secrets Certificates from Secrets Java Keystores from Secrets XML Configuration The Coherence OCI Secrets module provides a number of custom Coherence XML configuration extensions. To use these additional XML elements, the Coherence OCI custom XML namespace must be added to the Coherence operational configuration file or cache configuration file, as described in the Getting Started guide. ",
            "title": "Store SSL Keys &amp; Certs in Secrets"
        },
        {
            "location": "/docs/secrets/02_ssl",
            "text": " The default behaviour of the oci:secrets-key element is that its content is the OCID of a secret containing a private key PEM file. Alternatively the name of the secret can be used by specifying the &lt;oci:secret-name&gt; element as a child of the &lt;oci:secret-key&gt;` element and additionally a compartment OCID using the &lt;oci:compartment-id&gt; element. The example below will use the secret with the name my-secret-pem in the OCI compartment with OCID ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a . <markup lang=\"xml\" >&lt;identity-manager&gt; &lt;oci:secrets-key&gt; &lt;oci:secret-name&gt;my-secret-pem&lt;/oci:secret-name&gt; &lt;oci:compartment-id&gt; ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:compartment-id&gt; &lt;/oci:secrets-key&gt; &lt;cert&gt;file:/coherence/security/client.cert&lt;/cert&gt; &lt;/identity-manager&gt; If the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the &lt;oci:compartment-id&gt; element can be omitted, leaving just the &lt;oci:secret-name&gt; element: <markup lang=\"xml\" >&lt;identity-manager&gt; &lt;oci:secrets-key&gt; &lt;oci:secret-name&gt;my-secret-pem&lt;/oci:secret-name&gt; &lt;/oci:secrets-key&gt; &lt;cert&gt;file:/coherence/security/client.cert&lt;/cert&gt; &lt;/identity-manager&gt; Or alternatively if the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the secret name can be specified as the content of the &lt;oci:secrets-key&gt; element: <markup lang=\"xml\" >&lt;identity-manager&gt; &lt;oci:secrets-key&gt;my-secret-pem&lt;/oci:secrets-key&gt; &lt;cert&gt;file:/coherence/security/client.cert&lt;/cert&gt; &lt;/identity-manager&gt; If the &lt;oci:secrets-key&gt; element does not contain a valid OCID, it is assumed to be a secret name, in which case the Compartment OCID must be specified. If the &lt;oci:secret-name&gt; element is used, or if the &lt;oci:secrets-key&gt; element is not an OCID and no Compartment OCID is specified or the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are not set, then an exception will be thrown. ",
            "title": "Use Secret Names Instead of OCIDs"
        },
        {
            "location": "/docs/secrets/02_ssl",
            "text": " If a private key is stored in the OCI Secrets Service, Coherence SSL can be configured to use that private key. When configuring SSL in Coherence, a socket-provider element is added to the operational configuration or cache configuration files. For example, the XML below configures the socket provider to use a private key located on the file system at file:/coherence/security/client.pem <markup lang=\"xml\" >&lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\"&gt; &lt;cluster-config&gt; &lt;socket-providers&gt; &lt;socket-provider id=\"mySSLConfig\"&gt; &lt;ssl&gt; &lt;protocol&gt;TLS&lt;/protocol&gt; &lt;identity-manager&gt; &lt;key&gt;file:/coherence/security/client.pem&lt;/key&gt; &lt;cert&gt;file:/coherence/security/client.cert&lt;/cert&gt; &lt;/identity-manager&gt; &lt;trust-manager&gt; &lt;cert&gt;file:/coherence/security/ca.cert&lt;/cert&gt; &lt;/trust-manager&gt; &lt;/ssl&gt; &lt;/socket-provider&gt; &lt;/socket-providers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; Instead of using the file system, the private key in the file:/coherence/security/client.pem file can be uploaded to the OCI Secrets Service. The secrets-key XML element can then be used to retrieve the provate key from the OCI Secrets Service. In the example below, the OCI custom namespace has been added to the configuration file. In the &lt;identity-manager&gt; section, instead of the &lt;key&gt; element, the &lt;oci:secrets-key&gt; element is used to specify the OCID of the secret that the private key is stored in. <markup lang=\"xml\" >&lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;cluster-config&gt; &lt;socket-providers&gt; &lt;socket-provider id=\"mySSLConfig\"&gt; &lt;ssl&gt; &lt;protocol&gt;TLS&lt;/protocol&gt; &lt;identity-manager&gt; &lt;oci:secrets-key&gt; ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:secrets-key&gt; &lt;cert&gt;file:/coherence/security/client.cert&lt;/cert&gt; &lt;/identity-manager&gt; &lt;trust-manager&gt; &lt;cert&gt;file:/coherence/security/ca.cert&lt;/cert&gt; &lt;/trust-manager&gt; &lt;/ssl&gt; &lt;/socket-provider&gt; &lt;/socket-providers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; Use Secret Names Instead of OCIDs The default behaviour of the oci:secrets-key element is that its content is the OCID of a secret containing a private key PEM file. Alternatively the name of the secret can be used by specifying the &lt;oci:secret-name&gt; element as a child of the &lt;oci:secret-key&gt;` element and additionally a compartment OCID using the &lt;oci:compartment-id&gt; element. The example below will use the secret with the name my-secret-pem in the OCI compartment with OCID ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a . <markup lang=\"xml\" >&lt;identity-manager&gt; &lt;oci:secrets-key&gt; &lt;oci:secret-name&gt;my-secret-pem&lt;/oci:secret-name&gt; &lt;oci:compartment-id&gt; ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:compartment-id&gt; &lt;/oci:secrets-key&gt; &lt;cert&gt;file:/coherence/security/client.cert&lt;/cert&gt; &lt;/identity-manager&gt; If the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the &lt;oci:compartment-id&gt; element can be omitted, leaving just the &lt;oci:secret-name&gt; element: <markup lang=\"xml\" >&lt;identity-manager&gt; &lt;oci:secrets-key&gt; &lt;oci:secret-name&gt;my-secret-pem&lt;/oci:secret-name&gt; &lt;/oci:secrets-key&gt; &lt;cert&gt;file:/coherence/security/client.cert&lt;/cert&gt; &lt;/identity-manager&gt; Or alternatively if the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the secret name can be specified as the content of the &lt;oci:secrets-key&gt; element: <markup lang=\"xml\" >&lt;identity-manager&gt; &lt;oci:secrets-key&gt;my-secret-pem&lt;/oci:secrets-key&gt; &lt;cert&gt;file:/coherence/security/client.cert&lt;/cert&gt; &lt;/identity-manager&gt; If the &lt;oci:secrets-key&gt; element does not contain a valid OCID, it is assumed to be a secret name, in which case the Compartment OCID must be specified. If the &lt;oci:secret-name&gt; element is used, or if the &lt;oci:secrets-key&gt; element is not an OCID and no Compartment OCID is specified or the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are not set, then an exception will be thrown. ",
            "title": "Private Keys in Secrets"
        },
        {
            "location": "/docs/secrets/02_ssl",
            "text": " The default behaviour of the oci:secrets-cert element is that its content is the OCID of a secret containing the certificate file. Alternatively the name of the secret can be used by specifying the &lt;oci:secret-name&gt; element as a child of the &lt;oci:secret-cert&gt;` element and additionally a compartment OCID using the &lt;oci:compartment-id&gt; element. The example below will create a trust manager using the CA certificate from the secret with the name my-secret-ca-cert in the OCI compartment with OCID ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a . <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;oci:secrets-cert&gt; &lt;oci:secret-name&gt;my-secret-ca-cert&lt;/oci:secret-name&gt; &lt;oci:compartment-id&gt; ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:compartment-id&gt; &lt;/oci:secrets-cert&gt; &lt;/trust-manager&gt; If the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the &lt;oci:compartment-id&gt; element can be omitted, leaving just the &lt;oci:secret-name&gt; element: <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;oci:secrets-cert&gt; &lt;oci:secret-name&gt;my-secret-ca-cert&lt;/oci:secret-name&gt; &lt;/oci:secrets-cert&gt; &lt;/trust-manager&gt; Or alternatively if the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the secret name can be specified as the content of the &lt;oci:secrets-cert&gt; element: <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;oci:secrets-cert&gt;my-secret-ca-cert&lt;/oci:secrets-cert&gt; &lt;/trust-manager&gt; If the &lt;oci:secrets-cert&gt; element does not contain a valid OCID, it is assumed to be a secret name, in which case the Compartment OCID must be specified. If the &lt;oci:secret-name&gt; element is used, or if the &lt;oci:secrets-cert&gt; element is not an OCID and no Compartment OCID is specified or the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are not set, then an exception will be thrown. ",
            "title": "Use Secret Names Instead of OCIDs"
        },
        {
            "location": "/docs/secrets/02_ssl",
            "text": " If a certificate is stored in the OCI Secrets Service, Coherence SSL can be configured to use that certificate. When configuring SSL in Coherence, a socket-provider element is added to the operational configuration or cache configuration files. For example, the XML below configures the socket provider with an &lt;identity-manager&gt; that uses the certificate located on the file system at file:/coherence/security/client.cert and a &lt;trust-manager&gt; that uses the CA certificate located on the file system at file:/coherence/security/ca.cert <markup lang=\"xml\" >&lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\"&gt; &lt;cluster-config&gt; &lt;socket-providers&gt; &lt;socket-provider id=\"mySSLConfig\"&gt; &lt;ssl&gt; &lt;protocol&gt;TLS&lt;/protocol&gt; &lt;identity-manager&gt; &lt;key&gt;file:/coherence/security/client.pem&lt;/key&gt; &lt;cert&gt;file:/coherence/security/client.cert&lt;/cert&gt; &lt;/identity-manager&gt; &lt;trust-manager&gt; &lt;cert&gt;file:/coherence/security/ca.cert&lt;/cert&gt; &lt;/trust-manager&gt; &lt;/ssl&gt; &lt;/socket-provider&gt; &lt;/socket-providers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; Instead of using the file system, the certificate files can be uploaded to the OCI Secrets Service. The secrets-cert XML element can then be used to retrieve the provate key from the OCI Secrets Service. In the example below, the OCI custom namespace has been added to the configuration file. In the &lt;identity-manager&gt; section, instead of the &lt;key&gt; element, the &lt;oci:secrets-key&gt; element is used to specify the OCID of the secret that the certificates are stored in. <markup lang=\"xml\" >&lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;cluster-config&gt; &lt;socket-providers&gt; &lt;socket-provider id=\"mySSLConfig\"&gt; &lt;ssl&gt; &lt;protocol&gt;TLS&lt;/protocol&gt; &lt;identity-manager&gt; &lt;oci:secrets-key&gt; ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:secrets-key&gt; &lt;oci:secrets-cert&gt; ocid1.secret.oc1..decdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz89 &lt;/oci:secrets-cert&gt; &lt;/identity-manager&gt; &lt;trust-manager&gt; &lt;oci:secrets-cert&gt; ocid1.secret.oc1..xacdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz37 &lt;/oci:secrets-cert&gt; &lt;/trust-manager&gt; &lt;/ssl&gt; &lt;/socket-provider&gt; &lt;/socket-providers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; Use Secret Names Instead of OCIDs The default behaviour of the oci:secrets-cert element is that its content is the OCID of a secret containing the certificate file. Alternatively the name of the secret can be used by specifying the &lt;oci:secret-name&gt; element as a child of the &lt;oci:secret-cert&gt;` element and additionally a compartment OCID using the &lt;oci:compartment-id&gt; element. The example below will create a trust manager using the CA certificate from the secret with the name my-secret-ca-cert in the OCI compartment with OCID ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a . <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;oci:secrets-cert&gt; &lt;oci:secret-name&gt;my-secret-ca-cert&lt;/oci:secret-name&gt; &lt;oci:compartment-id&gt; ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:compartment-id&gt; &lt;/oci:secrets-cert&gt; &lt;/trust-manager&gt; If the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the &lt;oci:compartment-id&gt; element can be omitted, leaving just the &lt;oci:secret-name&gt; element: <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;oci:secrets-cert&gt; &lt;oci:secret-name&gt;my-secret-ca-cert&lt;/oci:secret-name&gt; &lt;/oci:secrets-cert&gt; &lt;/trust-manager&gt; Or alternatively if the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the secret name can be specified as the content of the &lt;oci:secrets-cert&gt; element: <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;oci:secrets-cert&gt;my-secret-ca-cert&lt;/oci:secrets-cert&gt; &lt;/trust-manager&gt; If the &lt;oci:secrets-cert&gt; element does not contain a valid OCID, it is assumed to be a secret name, in which case the Compartment OCID must be specified. If the &lt;oci:secret-name&gt; element is used, or if the &lt;oci:secrets-cert&gt; element is not an OCID and no Compartment OCID is specified or the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are not set, then an exception will be thrown. ",
            "title": "Certificates in Secrets"
        },
        {
            "location": "/docs/secrets/02_ssl",
            "text": " The default behaviour of the oci:secrets-key-store element is that its content is the OCID of a secret containing the keystore file. Alternatively the name of the secret can be used by specifying the &lt;oci:secret-name&gt; element as a child of the &lt;oci:secrets-key-store&gt;` element and additionally a compartment OCID using the &lt;oci:compartment-id&gt; element. The example below will create a trust store using the keystore data from the secret with the name my-truststore in the OCI compartment with OCID ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a . <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;key-store-loader&gt; &lt;oci:secrets-key-store&gt; &lt;oci:secret-name&gt;my-truststore&lt;/oci:secret-name&gt; &lt;oci:compartment-id&gt; ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:compartment-id&gt; &lt;/oci:secrets-key-store&gt; &lt;/key-store-loader&gt; &lt;/trust-manager&gt; If the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the &lt;oci:compartment-id&gt; element can be omitted, leaving just the &lt;oci:secret-name&gt; element: <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;key-store-loader&gt; &lt;oci:secrets-key-store&gt; &lt;oci:secret-name&gt;my-truststore&lt;/oci:secret-name&gt; &lt;/oci:secrets-key-store&gt; &lt;/key-store-loader&gt; &lt;/trust-manager&gt; Or alternatively if the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the secret name can be specified as the content of the &lt;oci:secrets-key-store&gt; element: <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;key-store-loader&gt; &lt;oci:secrets-key-store&gt;my-truststore&lt;/oci:secrets-key-store&gt; &lt;/key-store-loader&gt; &lt;/trust-manager&gt; If the &lt;oci:secrets-key-store&gt; element does not contain a valid OCID, it is assumed to be a secret name, in which case the Compartment OCID must be specified. If the &lt;oci:secret-name&gt; element is used, or if the &lt;oci:secrets-key-store&gt; element is not an OCID and no Compartment OCID is specified or the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are not set, then an exception will be thrown. ",
            "title": "Use Secret Names Instead of OCIDs"
        },
        {
            "location": "/docs/secrets/02_ssl",
            "text": " Instead of using private keys and certificates files, Coherence can use Java keystores in the &lt;identity-manager&gt; and &lt;trust-manager&gt; configurations. Normally keystores are loaded from the file system, but using the Coherence SSL extensions, a custom loader can be used to read the keystore from an alternative source. The Coherence OCI Secrets integration provides a custom keystore loader that can load keystore data from a secret stored in the OCI Secrets Service. For example, the XML below configures the socket provider to use two keystores the file system at file:/coherence/security/server.jks and file:/coherence/security/server-trust.jks <markup lang=\"xml\" >&lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd\"&gt; &lt;cluster-config&gt; &lt;socket-providers&gt; &lt;socket-provider id=\"mySSLConfig\"&gt; &lt;ssl&gt; &lt;protocol&gt;TLS&lt;/protocol&gt; &lt;identity-manager&gt; &lt;keystore&gt; &lt;url&gt;file:/coherence/security/server.jks&lt;/url&gt; &lt;/keystore&gt; &lt;/identity-manager&gt; &lt;trust-manager&gt; &lt;keystore&gt; &lt;url&gt;file:/coherence/security/server-trust.jks&lt;/url&gt; &lt;/keystore&gt; &lt;/trust-manager&gt; &lt;/ssl&gt; &lt;/socket-provider&gt; &lt;/socket-providers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; Instead of using the file system, the two keystores can be uploaded to secrets in the OCI Secrets Service. Using the Coherence OCI Secrets integration, it is then possible to load the keystores directlry from the secrets using the relevant OCID. <markup lang=\"xml\" >&lt;coherence xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:oci=\"class://com.oracle.coherence.oci.config.OCINamespaceHandler\" xmlns=\"http://xmlns.oracle.com/coherence/coherence-operational-config\" xsi:schemaLocation=\"http://xmlns.oracle.com/coherence/coherence-operational-config coherence-operational-config.xsd class://com.oracle.coherence.oci.config.OCINamespaceHandler coherence-oci.xsd\"&gt; &lt;cluster-config&gt; &lt;socket-providers&gt; &lt;socket-provider id=\"mySSLConfig\"&gt; &lt;ssl&gt; &lt;protocol&gt;TLS&lt;/protocol&gt; &lt;identity-manager&gt; &lt;keystore&gt; &lt;key-store-loader&gt; &lt;oci:secrets-key-store&gt; ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:secrets-key-store&gt; &lt;/key-store-loader&gt; &lt;/keystore&gt; &lt;/identity-manager&gt; &lt;trust-manager&gt; &lt;keystore&gt; &lt;key-store-loader&gt; &lt;oci:secrets-key-store&gt; ocid1.secret.oc1..xyzdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglixt5c &lt;/oci:secrets-key-store&gt; &lt;/key-store-loader&gt; &lt;/keystore&gt; &lt;/trust-manager&gt; &lt;/ssl&gt; &lt;/socket-provider&gt; &lt;/socket-providers&gt; &lt;/cluster-config&gt; &lt;/coherence&gt; The keystore for the identity manager will be loaded from the secret with OCID ocid1.secret.oc1..abcdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglijz4a and the keystore for the trust manager will be loaded from the secret with OCID ocid1.secret.oc1..xyzdeaaabvmgyifakesecrettxgxkxku5zhmpu35j67hdxvxpglixt5c . Use Secret Names Instead of OCIDs The default behaviour of the oci:secrets-key-store element is that its content is the OCID of a secret containing the keystore file. Alternatively the name of the secret can be used by specifying the &lt;oci:secret-name&gt; element as a child of the &lt;oci:secrets-key-store&gt;` element and additionally a compartment OCID using the &lt;oci:compartment-id&gt; element. The example below will create a trust store using the keystore data from the secret with the name my-truststore in the OCI compartment with OCID ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a . <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;key-store-loader&gt; &lt;oci:secrets-key-store&gt; &lt;oci:secret-name&gt;my-truststore&lt;/oci:secret-name&gt; &lt;oci:compartment-id&gt; ocid1.compartment.oc1..abcdeaaabvmgyifakecompartmentxgxkxku5zhmpu35j67hdxvxpglijz4a &lt;/oci:compartment-id&gt; &lt;/oci:secrets-key-store&gt; &lt;/key-store-loader&gt; &lt;/trust-manager&gt; If the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the &lt;oci:compartment-id&gt; element can be omitted, leaving just the &lt;oci:secret-name&gt; element: <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;key-store-loader&gt; &lt;oci:secrets-key-store&gt; &lt;oci:secret-name&gt;my-truststore&lt;/oci:secret-name&gt; &lt;/oci:secrets-key-store&gt; &lt;/key-store-loader&gt; &lt;/trust-manager&gt; Or alternatively if the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are set the secret name can be specified as the content of the &lt;oci:secrets-key-store&gt; element: <markup lang=\"xml\" >&lt;trust-manager&gt; &lt;key-store-loader&gt; &lt;oci:secrets-key-store&gt;my-truststore&lt;/oci:secrets-key-store&gt; &lt;/key-store-loader&gt; &lt;/trust-manager&gt; If the &lt;oci:secrets-key-store&gt; element does not contain a valid OCID, it is assumed to be a secret name, in which case the Compartment OCID must be specified. If the &lt;oci:secret-name&gt; element is used, or if the &lt;oci:secrets-key-store&gt; element is not an OCID and no Compartment OCID is specified or the coherence.oci.compartment system property, or COHERENCE_OCI_COMPARTMENT environment variable are not set, then an exception will be thrown. ",
            "title": "Keystores in Secrets"
        }
 ]
}